// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/incli (interfaces: RootHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cli "github.com/eneskzlcn/incli"
	gomock "github.com/golang/mock/gomock"
)

// MockRootHandler is a mock of RootHandler interface.
type MockRootHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRootHandlerMockRecorder
}

// MockRootHandlerMockRecorder is the mock recorder for MockRootHandler.
type MockRootHandlerMockRecorder struct {
	mock *MockRootHandler
}

// NewMockRootHandler creates a new mock instance.
func NewMockRootHandler(ctrl *gomock.Controller) *MockRootHandler {
	mock := &MockRootHandler{ctrl: ctrl}
	mock.recorder = &MockRootHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRootHandler) EXPECT() *MockRootHandlerMockRecorder {
	return m.recorder
}

// AddSubHandler mocks base method.
func (m *MockRootHandler) AddSubHandler(arg0 cli.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubHandler", arg0)
}

// AddSubHandler indicates an expected call of AddSubHandler.
func (mr *MockRootHandlerMockRecorder) AddSubHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubHandler", reflect.TypeOf((*MockRootHandler)(nil).AddSubHandler), arg0)
}

// CommandRun mocks base method.
func (m *MockRootHandler) CommandRun(arg0 *cli.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CommandRun", arg0, arg1)
}

// CommandRun indicates an expected call of CommandRun.
func (mr *MockRootHandlerMockRecorder) CommandRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandRun", reflect.TypeOf((*MockRootHandler)(nil).CommandRun), arg0, arg1)
}

// ExecuteCommand mocks base method.
func (m *MockRootHandler) ExecuteCommand() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCommand")
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteCommand indicates an expected call of ExecuteCommand.
func (mr *MockRootHandlerMockRecorder) ExecuteCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockRootHandler)(nil).ExecuteCommand))
}

// GetName mocks base method.
func (m *MockRootHandler) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockRootHandlerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockRootHandler)(nil).GetName))
}
